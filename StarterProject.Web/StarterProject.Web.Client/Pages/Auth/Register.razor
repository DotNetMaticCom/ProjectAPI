@page "/register"
@using StarterProject.ApiClient.Abstractions
@using StarterProject.ApiClient.Models.Auth
@using StarterProject.Web.Client.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Create your account
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Or
                <a href="/login" class="font-medium text-primary-600 hover:text-primary-500">
                    sign in to existing account
                </a>
            </p>
        </div>
        
        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" class="mt-8 space-y-6">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="rounded-md bg-red-50 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800">
                                @errorMessage
                            </h3>
                        </div>
                    </div>
                </div>
            }
            
            <div class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="firstName" class="label">First name</label>
                        <InputText id="firstName" @bind-Value="registerModel.FirstName" class="input" autocomplete="given-name" required />
                        <ValidationMessage For="() => registerModel.FirstName" class="text-red-600 text-sm mt-1" />
                    </div>
                    
                    <div>
                        <label for="lastName" class="label">Last name</label>
                        <InputText id="lastName" @bind-Value="registerModel.LastName" class="input" autocomplete="family-name" required />
                        <ValidationMessage For="() => registerModel.LastName" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>
                
                <div>
                    <label for="email" class="label">Email address</label>
                    <InputText id="email" @bind-Value="registerModel.Email" class="input" type="email" autocomplete="email" required />
                    <ValidationMessage For="() => registerModel.Email" class="text-red-600 text-sm mt-1" />
                </div>
                
                <div>
                    <label for="password" class="label">Password</label>
                    <InputText id="password" @bind-Value="registerModel.Password" class="input" type="password" autocomplete="new-password" required />
                    <ValidationMessage For="() => registerModel.Password" class="text-red-600 text-sm mt-1" />
                </div>
            </div>
            
            <div>
                <button type="submit" class="btn btn-primary w-full" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Creating account...</span>
                    }
                    else
                    {
                        <span>Create account</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RegisterRequest registerModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await AuthService.RegisterAsync(registerModel);
            
            if (response.AccessToken != null)
            {
                var authStateProvider = (JwtAuthenticationStateProvider)AuthStateProvider;
                await authStateProvider.NotifyUserAuthenticationAsync(response.AccessToken.Token);
                
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
        catch (Exception)
        {
            errorMessage = "Registration failed. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}