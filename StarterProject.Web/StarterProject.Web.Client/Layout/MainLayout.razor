@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using StarterProject.ApiClient.Abstractions
@using StarterProject.Web.Client.Auth
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject NavigationManager Navigation

<div class="min-h-screen bg-base-100">
    <div class="navbar bg-base-200 shadow-lg">
        <div class="navbar-start">
            <div class="dropdown">
                <label tabindex="0" class="btn btn-ghost lg:hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h8m-8 6h16" />
                    </svg>
                </label>
                <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                    <li><NavLink href="" Match="NavLinkMatch.All">Home</NavLink></li>
                    <AuthorizeView>
                        <Authorized>
                            <li><NavLink href="dashboard">Dashboard</NavLink></li>
                        </Authorized>
                    </AuthorizeView>
                </ul>
            </div>
            <a href="/" class="btn btn-ghost normal-case text-xl">StarterProject</a>
        </div>
        <div class="navbar-center hidden lg:flex">
            <ul class="menu menu-horizontal px-1">
                <li><NavLink href="" Match="NavLinkMatch.All" ActiveClass="active">Home</NavLink></li>
                <AuthorizeView>
                    <Authorized>
                        <li><NavLink href="dashboard" ActiveClass="active">Dashboard</NavLink></li>
                    </Authorized>
                </AuthorizeView>
            </ul>
        </div>
        <div class="navbar-end gap-2">
            <AuthorizeView>
                <Authorized>
                    <div class="dropdown dropdown-end">
                        <label tabindex="0" class="btn btn-ghost btn-circle avatar">
                            <div class="w-10 rounded-full bg-primary text-primary-content placeholder">
                                <span class="text-xl">@GetInitials(context.User.Identity?.Name)</span>
                            </div>
                        </label>
                        <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                            <li class="menu-title">
                                <span>@context.User.Identity?.Name</span>
                            </li>
                            <li><a href="/profile">Profile</a></li>
                            <li><a href="/settings">Settings</a></li>
                            <li><a @onclick="HandleLogout">Logout</a></li>
                        </ul>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <NavLink href="login" class="btn btn-ghost">Sign in</NavLink>
                    <NavLink href="register" class="btn btn-primary">Sign up</NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <main class="container mx-auto p-4">
        @Body
    </main>
</div>

<div id="blazor-error-ui" class="alert alert-error fixed bottom-4 right-4 w-auto max-w-md hidden" data-nosnippet>
    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <span>An unhandled error has occurred.</span>
    <div>
        <a href="." class="btn btn-sm">Reload</a>
    </div>
</div>

<style>
    #blazor-error-ui {
        display: none;
    }
</style>

@code {
    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        var authStateProvider = (JwtAuthenticationStateProvider)AuthStateProvider;
        await authStateProvider.NotifyUserLogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }
    
    private string GetInitials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "?";
            
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
            
        return name[0].ToString().ToUpper();
    }
}